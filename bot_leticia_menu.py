import os
import sys
import asyncio
import logging
import requests
import tempfile
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode
from dotenv import load_dotenv
from config import MESSAGES, PRICES, PACK_DESCRIPTIONS, PUSHIN_PAY_CONFIG, LINKS
from metrics import bot_metrics
from sistema_remarketing_pix import RemarketingPIX

# Carregar configura√ß√µes locais se existirem
def load_local_env():
    """Carregar vari√°veis do arquivo .env.local se existir"""
    env_local_path = os.path.join(os.path.dirname(__file__), '.env.local')
    if os.path.exists(env_local_path):
        with open(env_local_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        return True
    return False

# Carregar configura√ß√µes locais
local_env_loaded = load_local_env()

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configura√ß√µes
BOT_TOKEN = os.getenv('BOT_TOKEN')
PUSHIN_PAY_TOKEN = PUSHIN_PAY_CONFIG['token']
PUSHIN_PAY_BASE_URL = PUSHIN_PAY_CONFIG['base_url']
CONTEUDO_LINK = LINKS['content']
GROUP_CHAT_ID = os.getenv('GROUP_CHAT_ID')

# Estados da conversa
user_states = {}

# Inicializar sistema de remarketing
remarketing_system = None
if BOT_TOKEN:
    try:
        remarketing_system = RemarketingPIX(BOT_TOKEN)
        logger.info("üéØ Sistema de remarketing inicializado com sucesso")
    except Exception as e:
        logger.error(f"Erro ao inicializar sistema de remarketing: {e}")

# Controle de mensagens promocionais
promotional_messages_enabled = True

class ConversationState:
    WAITING_INITIAL = 'waiting_initial'
    WAITING_PACK_CHOICE = 'waiting_pack_choice'
    WAITING_PAYMENT = 'waiting_payment'
    CONVERSATION_ENDED = 'conversation_ended'

class LeticiaKyokoBot:
    """Classe principal do bot da Let√≠cia Kyoko com sistema de menu"""
    
    def __init__(self):
        self.packs = {
            'pack_basico': {
                'nome': 'Pack B√°sico',
                'valor': PRICES['pack_basico'],
                'descricao': PACK_DESCRIPTIONS['pack_basico'],
                'emoji': 'üíï'
            },
            'pack_medio': {
                'nome': 'Pack M√©dio', 
                'valor': PRICES['pack_medio'],
                'descricao': PACK_DESCRIPTIONS['pack_medio'],
                'emoji': 'üíñ'
            },
            'pack_completo': {
                'nome': 'Pack Completo',
                'valor': PRICES['pack_completo'], 
                'descricao': PACK_DESCRIPTIONS['pack_completo'],
                'emoji': 'üî•'
            },
            'videochamada': {
                'nome': 'V√≠deochamada',
                'valor': PRICES['videochamada'],
                'descricao': PACK_DESCRIPTIONS['videochamada'],
                'emoji': 'üìπ'
            },
            'programa': {
                'nome': 'Programa',
                'valor': PRICES['programa'],
                'descricao': PACK_DESCRIPTIONS['programa'],
                'emoji': 'üåô'
            }
        }
    
    def create_pix_payment(self, amount: float, pack_type: str) -> dict:
        """Criar pagamento PIX usando Pushin Pay API"""
        try:
            headers = {
                'Authorization': f'Bearer {PUSHIN_PAY_TOKEN}',
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
            
            # Converter valor para centavos (API espera valor em centavos)
            value_in_cents = int(amount * 100)
            
            payload = {
                'value': value_in_cents,
                'webhook_url': None  # Opcional: adicione sua URL de webhook se tiver
            }
            
            response = requests.post(
                f'{PUSHIN_PAY_BASE_URL}/pix/cashIn',
                json=payload,
                headers=headers
            )
            
            logger.info(f'Resposta da API Pushin Pay: {response.status_code} - {response.text}')
            
            if response.status_code == 200 or response.status_code == 201:
                pix_data = response.json()
                return {
                    'sucesso': True,
                    'id': pix_data.get('id'),
                    'qr_code': pix_data.get('qr_code'),
                    'qr_code_base64': pix_data.get('qr_code_base64'),
                    'valor': amount,
                    'pack_type': pack_type,
                    'status': pix_data.get('status'),
                    'criado_em': datetime.now().isoformat()
                }
            else:
                logger.error(f'Erro ao criar pagamento: {response.status_code} - {response.text}')
                return {'sucesso': False, 'erro': f'Erro da API: {response.status_code}'}
                
        except Exception as e:
            logger.error(f'Erro na API Pushin Pay: {e}')
            return {'sucesso': False, 'erro': str(e)}
    
    def get_menu_keyboard(self):
        """Criar teclado inline com op√ß√µes de packs"""
        keyboard = []
        
        for pack_id, pack_info in self.packs.items():
            button_text = f"{pack_info['emoji']} {pack_info['nome']} - R$ {pack_info['valor']:.2f}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"pack_{pack_id}")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def process_message(self, user_id: int, message: str) -> tuple:
        """Processar mensagem do usu√°rio e retornar resposta"""
        message_lower = message.lower()
        
        # Palavras-chave que indicam interesse
        interest_keywords = [
            'oi', 'ol√°', 'pack', 'conteudo', 'fotos', 'videos', 'quero',
            'interesse', 'comprar', 'ver', 'mostrar', 'menu', 'op√ß√µes'
        ]
        
        # Verificar se h√° interesse
        if any(keyword in message_lower for keyword in interest_keywords):
            return self.show_menu(), True
        
        # Resposta padr√£o para mensagens n√£o reconhecidas
        return self.show_menu(), True
    
    def show_menu(self) -> str:
        """Retornar texto do menu com sauda√ß√£o"""
        return MESSAGES['greeting'] + "\n\n" + MESSAGES['menu']
    
    def create_pix_for_pack(self, user_id: int, pack_id: str, context) -> str:
        """Criar PIX para um pack espec√≠fico"""
        if pack_id not in self.packs:
            return "Ops! Pack n√£o encontrado. Tente novamente."
        
        pack_info = self.packs[pack_id]
        valor = pack_info['valor']
        nome = pack_info['nome']
        descricao = pack_info['descricao']
        
        # Criar PIX
        resultado = self.create_pix_payment(valor, pack_id)
        
        if resultado['sucesso']:
            payment_id = resultado['id']
            
            # Salvar dados do pagamento no contexto
            context.user_data[f'payment_id_{pack_id}'] = payment_id
            context.user_data[f'pix_code_{pack_id}'] = resultado['qr_code']
            context.user_data['current_pack'] = pack_id
            
            # Iniciar campanha de remarketing
            if remarketing_system:
                try:
                    asyncio.create_task(remarketing_system.iniciar_campanha_remarketing(
                        user_id=str(user_id),
                        payment_id=payment_id,
                        valor_original=valor,
                        pack_name=nome
                    ))
                    logger.info(f"üéØ Campanha de remarketing iniciada para usu√°rio {user_id} - Pack: {nome}")
                except Exception as e:
                    logger.error(f"Erro ao iniciar campanha de remarketing: {e}")
            
            return MESSAGES['pack_confirmation'].format(
                pack_type=nome,
                price=valor,
                description=descricao,
                qr_code=resultado['qr_code'],
                pix_id=payment_id
            )
        else:
            return MESSAGES['pix_error'].format(error=resultado['erro'])

# Inst√¢ncia global do bot
leticia_bot = LeticiaKyokoBot()

async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Iniciar conversa com menu da Let√≠cia"""
    user_id = update.effective_user.id
    user_states[user_id] = ConversationState.WAITING_PACK_CHOICE
    
    # Registrar m√©tricas do usu√°rio
    bot_metrics.log_user_start(
        user_id=user_id,
        username=update.effective_user.username,
        first_name=update.effective_user.first_name
    )
    
    # Mostrar menu
    menu_text = leticia_bot.show_menu()
    keyboard = leticia_bot.get_menu_keyboard()
    
    await update.message.reply_text(
        menu_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar mensagens do usu√°rio"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # Verificar se √© um comando de m√©tricas ou sa√∫de (n√£o ativar fluxo)
    if message_text.lower().startswith(('/metricas', '/saude', '/groupid')):
        return
    
    # Verificar mensagens de pagamento
    payment_keywords = ['paguei', 'j√° fiz o pix', 'ja fiz o pix', 'fiz o pix', 'pagamento feito', 'pix feito']
    if any(keyword in message_text.lower() for keyword in payment_keywords):
        await update.message.reply_text(
            "Se voc√™ j√° fez o pix me manda o comprovante em @leticiakyoko porfavorzinho, vou te mandar o pack assim que conseguir <3"
        )
        return
    
    # Se n√£o h√° estado, iniciar conversa automaticamente
    if user_id not in user_states:
        await start_conversation(update, context)
        return
    
    # Processar mensagem
    response, show_keyboard = leticia_bot.process_message(user_id, message_text)
    
    if show_keyboard:
        keyboard = leticia_bot.get_menu_keyboard()
        await update.message.reply_text(
            response,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar cliques nos bot√µes inline"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    # Processar sele√ß√£o de pack
    if data.startswith('pack_'):
        pack_id = data.replace('pack_', '')
        
        # Criar PIX para o pack selecionado
        response = leticia_bot.create_pix_for_pack(user_id, pack_id, context)
        
        # Criar bot√µes de a√ß√£o
        pack_info = leticia_bot.packs.get(pack_id)
        if pack_info:
            keyboard = [
                [InlineKeyboardButton("üìã Copiar C√≥digo PIX", callback_data=f"copy_pix_{pack_id}")],
                [InlineKeyboardButton("‚úÖ Confirmar Pagamento", callback_data=f"confirm_payment_{pack_id}")],
                [InlineKeyboardButton("üîô Voltar ao Menu", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            reply_markup = None
        
        await query.edit_message_text(
            response,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Atualizar estado
        user_states[user_id] = ConversationState.WAITING_PAYMENT
    
    # Voltar ao menu
    elif data == 'show_menu':
        menu_text = leticia_bot.show_menu()
        keyboard = leticia_bot.get_menu_keyboard()
        
        await query.edit_message_text(
            menu_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
        user_states[user_id] = ConversationState.WAITING_PACK_CHOICE
    
    # Copiar c√≥digo PIX
    elif data.startswith('copy_pix_'):
        pack_id = data.replace('copy_pix_', '')
        pix_code = context.user_data.get(f'pix_code_{pack_id}')
        
        if pix_code:
            await query.message.reply_text(
                f"üìã **C√≥digo PIX copiado:**\n\n`{pix_code}`\n\n"
                f"Cole este c√≥digo no seu aplicativo banc√°rio para fazer o pagamento!",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await query.message.reply_text("‚ùå C√≥digo PIX n√£o encontrado. Tente gerar novamente.")
    
    # Confirmar pagamento
    elif data.startswith('confirm_payment_'):
        pack_id = data.replace('confirm_payment_', '')
        
        await query.message.reply_text(
            "‚úÖ **Pagamento em an√°lise!**\n\n"
            "Assim que o pagamento for confirmado, voc√™ receber√° todo o conte√∫do!\n\n"
            "Se j√° fez o PIX, me manda o comprovante em @leticiakyoko que eu te mando tudo rapidinho ‚ù§Ô∏è"
        )
        
        # Opcional: verificar status do pagamento
        payment_id = context.user_data.get(f'payment_id_{pack_id}')
        if payment_id:
            # Aqui voc√™ pode implementar verifica√ß√£o autom√°tica do pagamento
            pass

async def send_content_link(query, context):
    """Enviar link do conte√∫do ap√≥s confirma√ß√£o de pagamento"""
    await query.message.reply_text(
        MESSAGES['content_link_message'] + f"\n\n{CONTEUDO_LINK}"
    )

# Comandos administrativos
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start"""
    await start_conversation(update, context)

async def oi_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /oi"""
    await start_conversation(update, context)

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /menu para mostrar op√ß√µes"""
    await start_conversation(update, context)

async def show_metrics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostrar m√©tricas do bot"""
    try:
        metrics = bot_metrics.get_metrics()
        
        message = "üìä **M√©tricas do Bot Let√≠cia Kyoko**\n\n"
        message += f"üë• **Usu√°rios √∫nicos:** {metrics['unique_users']}\n"
        message += f"üí¨ **Total de conversas:** {metrics['total_conversations']}\n"
        message += f"üîÑ **Conversas ativas:** {metrics['active_conversations']}\n"
        message += f"üí∞ **PIX gerados:** {metrics['pix_generated']}\n"
        message += f"‚úÖ **Pagamentos confirmados:** {metrics['payments_confirmed']}\n"
        message += f"üìà **Taxa de convers√£o:** {metrics['conversion_rate']:.1f}%\n\n"
        message += f"üïê **√öltima atualiza√ß√£o:** {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
    except Exception as e:
        logger.error(f'Erro ao mostrar m√©tricas: {e}')
        await update.message.reply_text("‚ùå Erro ao carregar m√©tricas.")

async def saude_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando de sa√∫de do bot"""
    try:
        # Testar conex√£o com API
        test_response = requests.get(f'{PUSHIN_PAY_BASE_URL}/health', timeout=5)
        api_status = "‚úÖ Online" if test_response.status_code == 200 else "‚ùå Offline"
    except:
        api_status = "‚ùå Offline"
    
    message = "üè• **Status do Bot Let√≠cia Kyoko**\n\n"
    message += f"ü§ñ **Bot:** ‚úÖ Online\n"
    message += f"üîó **API Pushin Pay:** {api_status}\n"
    message += f"üíæ **Estados ativos:** {len(user_states)}\n"
    message += f"üïê **Uptime:** {datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n"
    message += f"üìã **Configura√ß√µes:**\n"
    message += f"‚Ä¢ Token: {'‚úÖ Configurado' if PUSHIN_PAY_TOKEN else '‚ùå N√£o configurado'}\n"
    message += f"‚Ä¢ Link conte√∫do: {'‚úÖ Configurado' if CONTEUDO_LINK else '‚ùå N√£o configurado'}"
    
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

def main():
    """Fun√ß√£o principal"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente")
        sys.exit(1)
    
    # Criar aplica√ß√£o
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Adicionar handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("oi", oi_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("metricas", show_metrics))
    application.add_handler(CommandHandler("saude", saude_command))
    
    # Handler para bot√µes inline
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Handler para mensagens de texto
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("üöÄ Bot Let√≠cia Kyoko iniciado com sistema de menu!")
    logger.info(f"üìã Packs dispon√≠veis: {len(leticia_bot.packs)}")
    logger.info(f"üí∞ Token configurado: {'‚úÖ' if PUSHIN_PAY_TOKEN else '‚ùå'}")
    
    # Iniciar bot
    application.run_polling()

if __name__ == '__main__':
    main()