import os
import sys
import asyncio
import logging
import requests
import tempfile
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode
from dotenv import load_dotenv
from metrics import bot_metrics

# Carregar configura√ß√µes locais se existirem
def load_local_env():
    """Carregar vari√°veis do arquivo .env.local se existir"""
    env_local_path = os.path.join(os.path.dirname(__file__), '.env.local')
    if os.path.exists(env_local_path):
        with open(env_local_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        return True
    return False

# Carregar configura√ß√µes locais
local_env_loaded = load_local_env()

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configura√ß√µes
BOT_TOKEN = os.getenv('BOT_TOKEN')
PUSHIN_PAY_TOKEN = '39884|DKt79CdRINdHafadVS01KwEHsF6vi8GwAoW273Meea17b5d5'
PUSHIN_PAY_BASE_URL = 'https://api.pushinpay.com.br/api'
CONTEUDO_LINK = 'https://kyokoleticia.site/conteudo'
GROUP_CHAT_ID = os.getenv('GROUP_CHAT_ID')

# Estados da conversa
user_states = {}

class ConversationState:
    WAITING_INITIAL = 'waiting_initial'
    WAITING_RESPONSE = 'waiting_response'
    WAITING_QUESTION_TIMEOUT = 'waiting_question_timeout'
    WAITING_PAYMENT_12 = 'waiting_payment_12'
    WAITING_PAYMENT_5 = 'waiting_payment_5'
    CONVERSATION_ENDED = 'conversation_ended'

def create_pix_payment(amount: float, description: str) -> dict:
    """Criar pagamento PIX usando Pushin Pay API"""
    try:
        headers = {
            'Authorization': f'Bearer {PUSHIN_PAY_TOKEN}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        
        # Converter valor para centavos (API espera valor em centavos)
        value_in_cents = int(amount * 100)
        
        payload = {
            'value': value_in_cents,
            'webhook_url': None  # Opcional: adicione sua URL de webhook se tiver
        }
        
        response = requests.post(
            f'{PUSHIN_PAY_BASE_URL}/pix/cashIn',
            json=payload,
            headers=headers
        )
        
        logger.info(f'Resposta da API Pushin Pay: {response.status_code} - {response.text}')
        
        if response.status_code == 200 or response.status_code == 201:
            return response.json()
        else:
            logger.error(f'Erro ao criar pagamento: {response.status_code} - {response.text}')
            return None
            
    except Exception as e:
        logger.error(f'Erro na API Pushin Pay: {e}')
        return None

def check_payment_status(payment_id: str) -> dict:
    """Verificar status do pagamento"""
    try:
        headers = {
            'Authorization': f'Bearer {PUSHIN_PAY_TOKEN}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        
        response = requests.get(
            f'{PUSHIN_PAY_BASE_URL}/transactions/{payment_id}',
            headers=headers
        )
        
        logger.info(f'Verifica√ß√£o de pagamento: {response.status_code} - {response.text}')
        
        if response.status_code == 200:
            payment_data = response.json()
            status = payment_data.get('status', 'unknown')
            return {
                'paid': status == 'paid',
                'status': status,
                'data': payment_data
            }
        else:
            logger.error(f'Erro ao verificar pagamento: {response.status_code} - {response.text}')
            return {'paid': False, 'status': 'error', 'data': None}
            
    except Exception as e:
        logger.error(f'Erro ao verificar pagamento: {e}')
        return {'paid': False, 'status': 'error', 'data': None}

async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Iniciar conversa com sequ√™ncia de mensagens"""
    user_id = update.effective_user.id
    user_states[user_id] = ConversationState.WAITING_INITIAL
    
    # Registrar m√©tricas do usu√°rio
    bot_metrics.log_user_start(
        user_id=user_id,
        username=update.effective_user.username,
        first_name=update.effective_user.first_name
    )
    
    # Primeira mensagem
    await update.message.reply_text(
        "Oiii mo, tudo bem? sou a Leticia Kyoko ali do grupo de packzinhos, fico muito feliz que voc√™ tenha gostado de mim e do meu conte√∫do e tenha se interessado mais nele"
    )
    
    # Aguardar um pouco antes da pr√≥xima mensagem
    await asyncio.sleep(2)
    
    # Enviar primeira foto
    try:
        if os.path.exists('fotos/4.jpg'):
            with open('fotos/4.jpg', 'rb') as photo:
                await update.message.reply_photo(photo=photo)
        else:
            await update.message.reply_text("üì∏ 4.jpg (foto ser√° adicionada)")
        
        await asyncio.sleep(2)
        
        
            
    except Exception as e:
        logger.error(f'Erro ao enviar m√≠dia: {e}')
    
    await asyncio.sleep(3)
    
    # Mensagem sobre o pack
    await update.message.reply_text(
        "O que acha? voc√™ vai receber isso e muito mais (rsrs) no seu telegram assim que fizer o pix para pegar seu packzinho comigo"
    )
    
    await asyncio.sleep(2)
    
    # Oferta
    await update.message.reply_text(
        "Que legal, voc√™ √© meu primeiro cliente hoje! No meu pack eu te entrego 26 fotinhas deliciosas e 7 v√≠deos explicitos para voc√™ gozar comigo rsrsrs. Tudo isso por s√≥ R$ 12,90, te envio tudo na hora no privado do telegram. Quer meu anjo?"
    )
    
    # Mensagem adicional sobre o b√¥nus
    await update.message.reply_text(
        "Voc√™ ainda recebe o link de um grupo com v√°rios packs de amigas minhas do onlyfans e privacy como B√îNUS mo."
    )
    
    # Aguardar 5 segundos antes de enviar os bot√µes
    await asyncio.sleep(5)
    
    # Enviar bot√µes automaticamente
    keyboard = [
        [InlineKeyboardButton("simm amor", callback_data="sim_12")],
        [InlineKeyboardButton("hoje n√£o", callback_data="nao_12")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "O que me diz?",
        reply_markup=reply_markup
    )
    
    # Mudar estado para aguardar resposta
    user_states[user_id] = ConversationState.WAITING_RESPONSE

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar mensagens do usu√°rio"""
    user_id = update.effective_user.id
    message_text = update.message.text.lower()
    
    # Verificar se √© um comando de m√©tricas ou sa√∫de (n√£o ativar fluxo)
    if message_text.startswith('/metricas') or message_text.startswith('/saude') or message_text.startswith('/groupid'):
        return
    
    # Verificar mensagens de pagamento em qualquer estado
    payment_keywords = ['paguei', 'j√° fiz o pix', 'ja fiz o pix', 'fiz o pix', 'pagamento feito', 'pix feito']
    if any(keyword in message_text for keyword in payment_keywords):
        await update.message.reply_text(
            "Se voc√™ j√° fez o pix me manda o comprovante em @leticiakyoko porfavorzinho, vou te mandar o pack assim que conseguir <3"
        )
        return
    
    # Se n√£o h√° estado, iniciar conversa automaticamente para qualquer mensagem
    if user_id not in user_states:
        await start_conversation(update, context)
        return
    
    current_state = user_states[user_id]
    
    if current_state == ConversationState.WAITING_RESPONSE:
        # Verificar se √© uma pergunta
        if '?' in update.message.text:
            user_states[user_id] = ConversationState.WAITING_QUESTION_TIMEOUT
            # Aguardar 2 minutos antes de responder
            context.job_queue.run_once(
                send_buttons_after_question,
                120,  # 2 minutos
                data={'chat_id': update.effective_chat.id, 'user_id': user_id}
            )
            return
        
        # Verificar resposta sim/n√£o
        if 'sim' in message_text or 'si' in message_text:
            await handle_yes_response(update, context)
        elif 'n√£o' in message_text or 'nao' in message_text or 'no' in message_text:
            await handle_no_response(update, context)
        else:
            # Enviar bot√µes diretamente se n√£o for sim/n√£o claro
            await send_initial_buttons(update, context)

async def send_buttons_after_question(context: ContextTypes.DEFAULT_TYPE):
    """Enviar bot√µes ap√≥s timeout de pergunta"""
    job_data = context.job.data
    chat_id = job_data['chat_id']
    user_id = job_data['user_id']
    
    if user_id in user_states and user_states[user_id] == ConversationState.WAITING_QUESTION_TIMEOUT:
        await send_initial_buttons_to_chat(context, chat_id, user_id)

async def send_initial_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Enviar bot√µes iniciais"""
    user_id = update.effective_user.id
    await send_initial_buttons_to_chat(context, update.effective_chat.id, user_id)

async def send_initial_buttons_to_chat(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    """Enviar bot√µes para um chat espec√≠fico"""
    keyboard = [
        [InlineKeyboardButton("simm amor", callback_data="sim_12")],
        [InlineKeyboardButton("hoje n√£o", callback_data="nao_12")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="Aguardando sua resposta...",
        reply_markup=reply_markup
    )
    
    user_states[user_id] = ConversationState.WAITING_RESPONSE

async def handle_yes_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar resposta positiva"""
    user_id = update.effective_user.id
    
    # Gerar PIX de R$ 12,90
    payment_data = create_pix_payment(12.90, "Pack Kyoko - R$ 12,90")
    
    if payment_data:
        user_states[user_id] = ConversationState.WAITING_PAYMENT_12
        
        # Salvar dados do pagamento
        context.user_data['payment_id_12'] = payment_data.get('id')
        context.user_data['pix_code_12'] = payment_data.get('qr_code')
        
        await update.message.reply_text(
            f"Perfeito amor! üíï\n\n"
            f"Aqui est√° seu PIX de R$ 12,90:\n\n"
            f"`{payment_data.get('qr_code', 'C√≥digo PIX n√£o dispon√≠vel')}`\n\n"
            f"Ap√≥s o pagamento, clique em 'Confirmar Pagamento' abaixo!",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã Copiar C√≥digo PIX", callback_data=f"copy_pix_12_{payment_data.get('id')}")],
                [InlineKeyboardButton("‚úÖ Confirmar Pagamento", callback_data="confirm_payment_12")]
            ])
        )
    else:
        await update.message.reply_text(
            "Ops! Houve um erro ao gerar o PIX. Tente novamente em alguns minutos."
        )

async def handle_no_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar resposta negativa"""
    user_id = update.effective_user.id
    
    await update.message.reply_text(
        "E se eu fizer mais baratinho para voc√™ mo? o que acha? consigo fazer at√© por R$ 5,90 porque realmente gostei muito de ter vc aqui comigo <3"
    )
    
    keyboard = [
        [InlineKeyboardButton("Pode ser", callback_data="pode_ser_5")],
        [InlineKeyboardButton("N√£o quero mesmo", callback_data="nao_quero")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "O que me diz?",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar cliques nos bot√µes"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "sim_12":
        # Gerar PIX de R$ 12,90
        payment_data = create_pix_payment(12.90, "Pack Kyoko - R$ 12,90")
        
        if payment_data:
            user_states[user_id] = ConversationState.WAITING_PAYMENT_12
            
            context.user_data['payment_id_12'] = payment_data.get('id')
            context.user_data['pix_code_12'] = payment_data.get('qr_code')
            
            await query.edit_message_text(
                f"Perfeito amor! üíï\n\n"
                f"Aqui est√° seu PIX de R$ 12,90:\n\n"
                f"`{payment_data.get('qr_code', 'C√≥digo PIX n√£o dispon√≠vel')}`\n\n"
                f"Ap√≥s o pagamento, clique em 'Confirmar Pagamento' abaixo!",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìã Copiar C√≥digo PIX", callback_data=f"copy_pix_12_{payment_data.get('id')}")],
                    [InlineKeyboardButton("‚úÖ Confirmar Pagamento", callback_data="confirm_payment_12")]
                ])
            )
        else:
            await query.edit_message_text(
                "Ops! Houve um erro ao gerar o PIX. Tente novamente em alguns minutos."
            )
    
    elif data == "nao_12":
        await query.edit_message_text(
            "E se eu fizer mais baratinho para voc√™ mo? o que acha? consigo fazer at√© por R$ 5,90 porque realmente gostei muito de ter vc aqui comigo <3",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("Pode ser", callback_data="pode_ser_5")],
                [InlineKeyboardButton("N√£o quero mesmo", callback_data="nao_quero")]
            ])
        )
    
    elif data == "pode_ser_5":
        # Gerar PIX de R$ 5,90
        payment_data = create_pix_payment(5.90, "Pack Kyoko - R$ 5,90")
        
        if payment_data:
            user_states[user_id] = ConversationState.WAITING_PAYMENT_5
            
            context.user_data['payment_id_5'] = payment_data.get('id')
            context.user_data['pix_code_5'] = payment_data.get('qr_code')
            
            await query.edit_message_text(
                f"Eba! Que bom que aceitou! üíï\n\n"
                f"Aqui est√° seu PIX de R$ 5,90:\n\n"
                f"`{payment_data.get('qr_code', 'C√≥digo PIX n√£o dispon√≠vel')}`\n\n"
                f"Ap√≥s o pagamento, clique em 'Confirmar Pagamento' abaixo!",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìã Copiar C√≥digo PIX", callback_data=f"copy_pix_5_{payment_data.get('id')}")],
                    [InlineKeyboardButton("‚úÖ Confirmar Pagamento", callback_data="confirm_payment_5")]
                ])
            )
        else:
            await query.edit_message_text(
                "Ops! Houve um erro ao gerar o PIX. Tente novamente em alguns minutos."
            )
    
    elif data == "nao_quero":
        user_states[user_id] = ConversationState.CONVERSATION_ENDED
        
        await query.edit_message_text(
            "Aaaaah, tudo bem ent√£o gatinho, obrigada. Caso mude de ideia s√≥ me falar aqui"
        )
        
        # Enviar foto 1.jpg
        try:
            if os.path.exists('fotos/1.jpg'):
                with open('fotos/1.jpg', 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=photo
                    )
            else:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="üì∏ 1.jpg (foto ser√° adicionada)"
                )
        except Exception as e:
            logger.error(f'Erro ao enviar foto final: {e}')
        
        # Enviar mensagem final de suporte
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="Se voc√™ tiver algum problema para receber o pack me chama no @leticiakyoko, vou te responder assim que puder <3"
        )
    
    elif data.startswith("copy_pix_12_") or data.startswith("copy_pix_5_"):
        # Extrair o c√≥digo PIX dos dados do usu√°rio
        if data.startswith("copy_pix_12_"):
            pix_code = context.user_data.get('pix_code_12', 'C√≥digo n√£o dispon√≠vel')
            valor = "R$ 12,90"
        else:
            pix_code = context.user_data.get('pix_code_5', 'C√≥digo n√£o dispon√≠vel')
            valor = "R$ 5,90"
        
        await query.answer(f"C√≥digo PIX de {valor} copiado! Cole no seu app de pagamento.", show_alert=True)
        
        # Enviar o c√≥digo PIX em uma mensagem separada para facilitar a c√≥pia
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üìã **C√≥digo PIX para copiar ({valor}):**\n\n`{pix_code}`",
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "confirm_payment_12":
        payment_id = context.user_data.get('payment_id_12')
        if payment_id:
            payment_status = check_payment_status(payment_id)
            if payment_status['paid']:
                await send_content_link(query, context)
            else:
                status = payment_status['status']
                if status == 'pending' or status == 'CRIADO':
                    await query.answer("Pagamento ainda n√£o foi processado. Aguarde alguns minutos e tente novamente.", show_alert=True)
                else:
                    await query.answer("Voc√™ ainda n√£o pagou amor, verifica a√≠ e tenta de novo.", show_alert=True)
        else:
            await query.answer("Erro: ID do pagamento n√£o encontrado.", show_alert=True)
    
    elif data == "confirm_payment_5":
        payment_id = context.user_data.get('payment_id_5')
        if payment_id:
            payment_status = check_payment_status(payment_id)
            if payment_status['paid']:
                await send_content_link(query, context)
            else:
                status = payment_status['status']
                if status == 'pending' or status == 'CRIADO':
                    await query.answer("Pagamento ainda n√£o foi processado. Aguarde alguns minutos e tente novamente.", show_alert=True)
                else:
                    await query.answer("Voc√™ ainda n√£o pagou amor, verifica a√≠ e tenta de novo.", show_alert=True)
        else:
            await query.answer("Erro: ID do pagamento n√£o encontrado.", show_alert=True)

async def send_content_link(query, context):
    """Enviar link do conte√∫do ap√≥s pagamento confirmado"""
    user_id = query.from_user.id
    user_states[user_id] = ConversationState.CONVERSATION_ENDED
    
    # Determinar tipo de pagamento baseado no callback
    payment_type = "pack_12" if "12" in query.data else "pack_5"
    amount = 12.90 if payment_type == "pack_12" else 5.00
    
    # Registrar pagamento nas m√©tricas
    bot_metrics.log_payment(user_id, amount, payment_type)
    
    await query.edit_message_text(
        f"Pagamento confirmado! üéâ\n\n"
        f"Entre no meu site de packzinho e baixe diretamente de l√°, obrigado por comprar gatinho, caso queira mais s√≥ me chamar rsrs. Espero que goste...\n\n"
        f"üîó Link: {CONTEUDO_LINK}"
    )
    
    # Enviar mensagem final de suporte
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="Se voc√™ tiver algum problema para receber o pack me chama no @leticiakyoko, vou te responder assim que puder <3"
    )

async def show_metrics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Exibir m√©tricas do bot"""
    try:
        # Obter estat√≠sticas de convers√£o
        conversion_stats = bot_metrics.get_conversion_rate()
        
        # Obter estat√≠sticas di√°rias dos √∫ltimos 7 dias
        daily_stats = bot_metrics.get_daily_stats(days=7)
        
        # Obter estat√≠sticas por hora de hoje
        hourly_stats = bot_metrics.get_hourly_distribution()
        
        # Montar mensagem de m√©tricas
        metrics_message = f"üìä **M√âTRICAS DO BOT KYOKO**\n\n"
        
        # Estat√≠sticas gerais
        metrics_message += f"üéØ **CONVERS√ÉO GERAL**\n"
        metrics_message += f"‚Ä¢ Total de conversas: {conversion_stats['total_conversations']}\n"
        metrics_message += f"‚Ä¢ Total de pagamentos: {conversion_stats['total_payments']}\n"
        metrics_message += f"‚Ä¢ Taxa de convers√£o: {conversion_stats['conversion_rate']}%\n"
        metrics_message += f"‚Ä¢ Receita total: R$ {conversion_stats['total_revenue']:.2f}\n"
        metrics_message += f"‚Ä¢ Ticket m√©dio: R$ {conversion_stats['average_ticket']:.2f}\n\n"
        
        # Detalhes por tipo de pack
        metrics_message += f"üí∞ **VENDAS POR PACK**\n"
        metrics_message += f"‚Ä¢ Pack R$ 12,90: {conversion_stats['payments_12']} vendas\n"
        metrics_message += f"‚Ä¢ Pack R$ 5,90: {conversion_stats['payments_5']} vendas\n\n"
        
        # Estat√≠sticas di√°rias (√∫ltimos 7 dias)
        if daily_stats and daily_stats['days']:
            metrics_message += f"üìÖ **√öLTIMOS 7 DIAS**\n"
            for day_data in daily_stats['days']:
                if day_data['total_conversations'] > 0:  # S√≥ mostrar dias com atividade
                    metrics_message += f"‚Ä¢ {day_data['date']}: {day_data['total_conversations']} conversas, {day_data['payments']} pagamentos, R$ {day_data['revenue']:.2f}\n"
            metrics_message += "\n"
        
        # Estat√≠sticas por hora (hoje)
        if hourly_stats and hourly_stats['hourly_data']:
            metrics_message += f"üïê **HOJE POR HORA**\n"
            for hour_data in hourly_stats['hourly_data']:
                if hour_data['count'] > 0:  # S√≥ mostrar horas com atividade
                    metrics_message += f"‚Ä¢ {hour_data['hour']}: {hour_data['count']} conversas ({hour_data['percentage']}%)\n"
        
        await update.message.reply_text(
            metrics_message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f'Erro ao exibir m√©tricas: {e}')
        await update.message.reply_text(
            "‚ùå Erro ao carregar m√©tricas. Tente novamente."
        )

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start"""
    await start_conversation(update, context)

async def oi_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /oi"""
    await start_conversation(update, context)

async def send_promotional_message(context: ContextTypes.DEFAULT_TYPE):
    """Enviar mensagem promocional autom√°tica para o grupo"""
    try:
        if GROUP_CHAT_ID:
            promotional_text = "Super promo, pack apenas hoje por R$ 12,90 ‚ù§Ô∏è‚Äçüî• Vem se divertir comigo amor @kyoko_uwubot"
            
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=promotional_text
            )
            
            logger.info(f'Mensagem promocional enviada para o grupo {GROUP_CHAT_ID}')
        else:
            logger.warning('GROUP_CHAT_ID n√£o configurado - mensagem promocional n√£o enviada')
            
    except Exception as e:
        logger.error(f'Erro ao enviar mensagem promocional: {e}')

async def clean_group_messages(context: ContextTypes.DEFAULT_TYPE):
    """Limpar mensagens de entrada/sa√≠da de membros e notifica√ß√µes do grupo a cada 5 minutos"""
    try:
        if not GROUP_CHAT_ID:
            logger.warning('GROUP_CHAT_ID n√£o configurado - limpeza de mensagens desabilitada')
            return
            
        # Obter informa√ß√µes do bot para identificar suas mensagens
        bot_info = await context.bot.get_me()
        bot_username = bot_info.username
        
        # Obter as √∫ltimas 100 mensagens do grupo
        try:
            # Usar o m√©todo get_chat para verificar se temos acesso ao grupo
            chat = await context.bot.get_chat(GROUP_CHAT_ID)
            
            # Como n√£o podemos obter hist√≥rico de mensagens diretamente,
            # vamos armazenar IDs de mensagens para deletar posteriormente
            # Esta implementa√ß√£o ser√° feita atrav√©s de um handler de mensagens
            logger.info(f'Verifica√ß√£o de limpeza executada para o grupo {GROUP_CHAT_ID}')
            
        except Exception as e:
            logger.error(f'Erro ao acessar o grupo {GROUP_CHAT_ID}: {e}')
            
    except Exception as e:
        logger.error(f'Erro na limpeza de mensagens: {e}')

# Lista global para armazenar IDs de mensagens que devem ser deletadas
messages_to_delete = []

def ensure_single_instance():
    """Garantir que apenas uma inst√¢ncia do bot rode por vez"""
    lock_file_path = os.path.join(tempfile.gettempdir(), 'bot_kyoko_packs.lock')
    
    try:
        # Verificar se arquivo de lock existe e se o processo ainda est√° rodando
        if os.path.exists(lock_file_path):
            with open(lock_file_path, 'r') as f:
                try:
                    old_pid = int(f.read().strip())
                    # Verificar se o processo ainda existe (Windows)
                    import psutil
                    if psutil.pid_exists(old_pid):
                        logger.error(f"‚ùå Outra inst√¢ncia do bot j√° est√° rodando (PID: {old_pid})!")
                        logger.error("üí° Para parar: Get-Process python | Stop-Process -Force")
                        sys.exit(1)
                    else:
                        # Processo n√£o existe mais, remover lock antigo
                        os.remove(lock_file_path)
                except (ValueError, ImportError):
                    # Se n√£o conseguir verificar, remover lock antigo
                    os.remove(lock_file_path)
        
        # Criar novo arquivo de lock
        with open(lock_file_path, 'w') as f:
            f.write(str(os.getpid()))
        
        logger.info(f"üîí Lock criado: PID {os.getpid()}")
        return lock_file_path
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel criar lock: {e}")
        return None

async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para mensagens do grupo - identifica mensagens para deletar"""
    try:
        # Verificar se a mensagem √© do grupo configurado
        if update.effective_chat.id != int(GROUP_CHAT_ID):
            return
            
        message = update.message
        if not message:
            return
            
        # Obter informa√ß√µes do bot
        bot_info = await context.bot.get_me()
        bot_username = bot_info.username
        
        should_delete = False
        
        # Verificar se √© mensagem de entrada/sa√≠da de membros
        if (message.new_chat_members or 
            message.left_chat_member or 
            message.group_chat_created or 
            message.supergroup_chat_created or 
            message.channel_chat_created or 
            message.migrate_to_chat_id or 
            message.migrate_from_chat_id or 
            message.pinned_message or 
            message.new_chat_title or 
            message.new_chat_photo or 
            message.delete_chat_photo):
            should_delete = True
            
        # Verificar se √© mensagem de usu√°rio (n√£o √© da Leticia Kyoko nem do bot)
        elif message.from_user:
            username = message.from_user.username or ""
            first_name = message.from_user.first_name or ""
            
            # Manter apenas mensagens da "Leticia Kyoko" e do bot
            if (username.lower() != "leticiakyoko" and 
                first_name.lower() != "leticia kyoko" and 
                username != bot_username and 
                not message.from_user.is_bot):
                should_delete = True
                
        # Adicionar √† lista de mensagens para deletar
        if should_delete:
            messages_to_delete.append({
                'chat_id': message.chat_id,
                'message_id': message.message_id,
                'timestamp': datetime.datetime.now()
            })
            logger.info(f'Mensagem marcada para dele√ß√£o: {message.message_id}')
            
    except Exception as e:
        logger.error(f'Erro ao processar mensagem do grupo: {e}')

async def execute_message_cleanup(context: ContextTypes.DEFAULT_TYPE):
    """Executar limpeza das mensagens marcadas para dele√ß√£o"""
    global messages_to_delete
    
    try:
        if not messages_to_delete:
            logger.info('Nenhuma mensagem para deletar')
            return
            
        deleted_count = 0
        failed_count = 0
        
        # Criar uma c√≥pia da lista para iterar
        messages_copy = messages_to_delete.copy()
        
        for msg_info in messages_copy:
            try:
                await context.bot.delete_message(
                    chat_id=msg_info['chat_id'],
                    message_id=msg_info['message_id']
                )
                deleted_count += 1
                messages_to_delete.remove(msg_info)
                
            except Exception as e:
                failed_count += 1
                # Remover mensagens antigas que falharam (mais de 48h)
                if (datetime.datetime.now() - msg_info['timestamp']).total_seconds() > 172800:
                    messages_to_delete.remove(msg_info)
                    logger.warning(f'Removendo mensagem antiga da lista: {msg_info["message_id"]}')
                else:
                    logger.warning(f'Falha ao deletar mensagem {msg_info["message_id"]}: {e}')
                    
        if deleted_count > 0 or failed_count > 0:
            logger.info(f'Limpeza conclu√≠da: {deleted_count} deletadas, {failed_count} falharam')
            
    except Exception as e:
        logger.error(f'Erro na execu√ß√£o da limpeza: {e}')

async def get_group_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando para obter o ID do grupo atual"""
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    chat_title = update.effective_chat.title or "Chat Privado"
    
    message = f"üìã **Informa√ß√µes do Chat:**\n\n"
    message += f"üÜî **ID:** `{chat_id}`\n"
    message += f"üìù **Tipo:** {chat_type}\n"
    message += f"üè∑Ô∏è **Nome:** {chat_title}\n\n"
    
    if chat_type in ['group', 'supergroup']:
        message += "‚úÖ Este √© um grupo! Voc√™ pode usar este ID na vari√°vel GROUP_CHAT_ID do arquivo .env"
    else:
        message += "‚ÑπÔ∏è Este n√£o √© um grupo. Para obter o ID de um grupo, execute este comando dentro do grupo desejado."
    
    await update.message.reply_text(message, parse_mode='Markdown')

async def saude_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando para verificar se o bot est√° funcionando normalmente"""
    import datetime
    import psutil
    import os
    
    try:
        # Informa√ß√µes b√°sicas com fuso hor√°rio de Bras√≠lia (UTC-3)
        utc_now = datetime.datetime.now(datetime.timezone.utc)
        brasilia_offset = datetime.timedelta(hours=-3)
        now = utc_now + brasilia_offset
        uptime = datetime.datetime.now() - datetime.datetime.fromtimestamp(psutil.Process(os.getpid()).create_time())
        
        # Status do sistema
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        # Verifica se os jobs autom√°ticos est√£o configurados
        job_queue_status = "‚úÖ Ativo" if GROUP_CHAT_ID else "‚ö†Ô∏è N√£o configurado"
        
        # Contar mensagens pendentes para limpeza
        pending_cleanup = len(messages_to_delete)
        
        message = f"ü§ñ **Status do Bot Kyoko**\n\n"
        message += f"‚úÖ **Bot Online:** Funcionando normalmente\n"
        message += f"‚è∞ **Data/Hora:** {now.strftime('%d/%m/%Y %H:%M:%S')}\n"
        message += f"üïê **Uptime:** {str(uptime).split('.')[0]}\n"
        message += f"üíæ **Uso de Mem√≥ria:** {memory.percent:.1f}%\n"
        message += f"üñ•Ô∏è **Uso de CPU:** {cpu_percent:.1f}%\n"
        message += f"üì¢ **Jobs Autom√°ticos:** {job_queue_status}\n"
        message += f"üßπ **Mensagens p/ Limpeza:** {pending_cleanup}\n\n"
        
        if GROUP_CHAT_ID:
            message += f"üéØ **Grupo Configurado:** `{GROUP_CHAT_ID}`\n"
        
        message += "üîÑ **Comandos Dispon√≠veis:**\n"
        message += "‚Ä¢ `/start` - Iniciar bot\n"
        message += "‚Ä¢ `/oi` - Sauda√ß√£o\n"
        message += "‚Ä¢ `/metricas` - Ver estat√≠sticas\n"
        message += "‚Ä¢ `/groupid` - ID do grupo\n"
        message += "‚Ä¢ `/saude` - Status do bot\n\n"
        message += "üíö **Tudo funcionando perfeitamente!**"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        logger.info(f"Comando /saude executado por {update.effective_user.first_name}")
        
    except Exception as e:
        error_message = f"‚ùå **Erro ao verificar status:**\n\n`{str(e)}`\n\n"
        error_message += "‚ö†Ô∏è O bot est√° online, mas houve um problema ao coletar informa√ß√µes do sistema."
        await update.message.reply_text(error_message, parse_mode='Markdown')
        logger.error(f"Erro no comando /saude: {e}")

def main():
    """Fun√ß√£o principal"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN n√£o encontrado! Configure a vari√°vel de ambiente.")
        return
    
    # Verificar inst√¢ncia √∫nica
    lock_file = ensure_single_instance()
    
    # Log de configura√ß√µes
    environment = os.getenv('ENVIRONMENT', 'production')
    logger.info(f"üåç Ambiente: {environment}")
    if local_env_loaded:
        logger.info("üìÅ Configura√ß√µes locais carregadas (.env.local)")
    logger.info(f"ü§ñ Bot Token: ...{BOT_TOKEN[-10:]}")
    logger.info(f"üë• Grupo ID: {GROUP_CHAT_ID}")
    
    # Criar aplica√ß√£o
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Adicionar handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("oi", oi_command))
    application.add_handler(CommandHandler("metricas", show_metrics))
    application.add_handler(CommandHandler("groupid", get_group_id_command))
    application.add_handler(CommandHandler("saude", saude_command))
    
    # Handler para mensagens privadas (conversas do bot)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, handle_message))
    
    # Handler para mensagens do grupo (para limpeza autom√°tica)
    application.add_handler(MessageHandler(filters.ALL & filters.ChatType.GROUPS, handle_group_message))
    
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Configurar jobs autom√°ticos
    if GROUP_CHAT_ID:
        try:
            job_queue = application.job_queue
            if job_queue is not None:
                # Mensagens promocionais (a cada 1 hora)
                job_queue.run_repeating(
                    send_promotional_message,
                    interval=3600,  # 3600 segundos = 1 hora
                    first=10,       # Primeira execu√ß√£o ap√≥s 10 segundos (teste de deploy)
                    name='promotional_messages'
                )
                
                # Limpeza de mensagens (a cada 5 minutos)
                job_queue.run_repeating(
                    execute_message_cleanup,
                    interval=300,   # 300 segundos = 5 minutos
                    first=30,       # Primeira execu√ß√£o ap√≥s 30 segundos
                    name='message_cleanup'
                )
                
                logger.info(f"Jobs autom√°ticos configurados para o grupo {GROUP_CHAT_ID}:")
                logger.info("- Mensagens promocionais: a cada 1 hora")
                logger.info("- Limpeza de mensagens: a cada 5 minutos")
                logger.info("Primeira mensagem promocional ser√° enviada em 10 segundos como teste de deploy")
                logger.info("Primeira limpeza ser√° executada em 30 segundos")
            else:
                logger.error("JobQueue n√£o dispon√≠vel. Instale com: pip install python-telegram-bot[job-queue]")
        except Exception as e:
            logger.error(f"Erro ao configurar jobs autom√°ticos: {e}")
            logger.error("Para usar jobs autom√°ticos, instale: pip install python-telegram-bot[job-queue]")
    else:
        logger.warning("GROUP_CHAT_ID n√£o configurado - jobs autom√°ticos desabilitados")
    
    # Iniciar bot
    logger.info("Bot iniciado!")
    application.run_polling()

if __name__ == '__main__':
    main()